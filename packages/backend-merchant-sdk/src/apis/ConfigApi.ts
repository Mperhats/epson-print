/* tslint:disable */
/* eslint-disable */
/**
 * NOSH-API
 * NOSH Backend API
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AppVersionMerchantDto, AppVersionMerchantInput } from '../models/index';
import {
  AppVersionMerchantDtoFromJSON,
  AppVersionMerchantDtoToJSON,
  AppVersionMerchantInputFromJSON,
  AppVersionMerchantInputToJSON,
} from '../models/index';
import * as runtime from '../runtime';

export interface ConfigApiCheckAppVersionRequest {
  appVersionMerchantInput: AppVersionMerchantInput;
}

/**
 *
 */
export class ConfigApi extends runtime.BaseAPI {
  /**
   */
  async checkAppVersionRaw(
    requestParameters: ConfigApiCheckAppVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AppVersionMerchantDto>> {
    if (
      requestParameters.appVersionMerchantInput === null ||
      requestParameters.appVersionMerchantInput === undefined
    ) {
      throw new runtime.RequiredError(
        'appVersionMerchantInput',
        'Required parameter requestParameters.appVersionMerchantInput was null or undefined when calling checkAppVersion.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/merchant/v1/config/app-version`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: AppVersionMerchantInputToJSON(requestParameters.appVersionMerchantInput),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AppVersionMerchantDtoFromJSON(jsonValue),
    );
  }

  /**
   */
  async checkAppVersion(
    requestParameters: ConfigApiCheckAppVersionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AppVersionMerchantDto> {
    const response = await this.checkAppVersionRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
