/* tslint:disable */
/* eslint-disable */
/**
 * NOSH-API
 * NOSH Backend API
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  ForbiddenException,
  OrderEventMerchantDto,
  OrderMerchantDto,
  OrderSubmitEventMerchantInput,
} from '../models/index';
import {
  ForbiddenExceptionFromJSON,
  ForbiddenExceptionToJSON,
  OrderEventMerchantDtoFromJSON,
  OrderEventMerchantDtoToJSON,
  OrderMerchantDtoFromJSON,
  OrderMerchantDtoToJSON,
  OrderSubmitEventMerchantInputFromJSON,
  OrderSubmitEventMerchantInputToJSON,
} from '../models/index';
import * as runtime from '../runtime';

export interface OrdersApiGetOrderRequest {
  id: string;
}

export interface OrdersApiGetOrderEventHistoryRequest {
  id: string;
}

export interface OrdersApiSubmitOrderEventRequest {
  orderSubmitEventMerchantInput: OrderSubmitEventMerchantInput;
}

/**
 *
 */
export class OrdersApi extends runtime.BaseAPI {
  /**
   */
  async getActiveOrdersRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<OrderMerchantDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/merchant/v1/order/active`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(OrderMerchantDtoFromJSON),
    );
  }

  /**
   */
  async getActiveOrders(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<OrderMerchantDto>> {
    const response = await this.getActiveOrdersRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async getCanceledOrdersRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<OrderMerchantDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/merchant/v1/order/canceled`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(OrderMerchantDtoFromJSON),
    );
  }

  /**
   */
  async getCanceledOrders(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<OrderMerchantDto>> {
    const response = await this.getCanceledOrdersRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async getCompletedOrdersRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<OrderMerchantDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/merchant/v1/order/completed`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(OrderMerchantDtoFromJSON),
    );
  }

  /**
   */
  async getCompletedOrders(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<OrderMerchantDto>> {
    const response = await this.getCompletedOrdersRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async getCompletedRecentlyOrdersRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<OrderMerchantDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/merchant/v1/order/recent`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(OrderMerchantDtoFromJSON),
    );
  }

  /**
   */
  async getCompletedRecentlyOrders(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<OrderMerchantDto>> {
    const response = await this.getCompletedRecentlyOrdersRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async getNewOrdersRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<OrderMerchantDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/merchant/v1/order/new`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(OrderMerchantDtoFromJSON),
    );
  }

  /**
   */
  async getNewOrders(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<OrderMerchantDto>> {
    const response = await this.getNewOrdersRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async getOrderRaw(
    requestParameters: OrdersApiGetOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<OrderMerchantDto>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling getOrder.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/merchant/v1/order/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OrderMerchantDtoFromJSON(jsonValue),
    );
  }

  /**
   */
  async getOrder(
    requestParameters: OrdersApiGetOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<OrderMerchantDto> {
    const response = await this.getOrderRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async getOrderEventHistoryRaw(
    requestParameters: OrdersApiGetOrderEventHistoryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<OrderEventMerchantDto>>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling getOrderEventHistory.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/merchant/v1/order/{id}/event-history`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(OrderEventMerchantDtoFromJSON),
    );
  }

  /**
   */
  async getOrderEventHistory(
    requestParameters: OrdersApiGetOrderEventHistoryRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<OrderEventMerchantDto>> {
    const response = await this.getOrderEventHistoryRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async submitOrderEventRaw(
    requestParameters: OrdersApiSubmitOrderEventRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<OrderMerchantDto>> {
    if (
      requestParameters.orderSubmitEventMerchantInput === null ||
      requestParameters.orderSubmitEventMerchantInput === undefined
    ) {
      throw new runtime.RequiredError(
        'orderSubmitEventMerchantInput',
        'Required parameter requestParameters.orderSubmitEventMerchantInput was null or undefined when calling submitOrderEvent.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/merchant/v1/order/submit-event`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: OrderSubmitEventMerchantInputToJSON(requestParameters.orderSubmitEventMerchantInput),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      OrderMerchantDtoFromJSON(jsonValue),
    );
  }

  /**
   */
  async submitOrderEvent(
    requestParameters: OrdersApiSubmitOrderEventRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<OrderMerchantDto> {
    const response = await this.submitOrderEventRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
