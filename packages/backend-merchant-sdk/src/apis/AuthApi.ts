/* tslint:disable */
/* eslint-disable */
/**
 * NOSH-API
 * NOSH Backend API
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  AblyTokenDto,
  EmailLoginMerchantInput,
  EmptyResultDto,
  ForbiddenException,
  ForgotPasswordInput,
  UserInfoMerchantDto,
} from '../models/index';
import {
  AblyTokenDtoFromJSON,
  AblyTokenDtoToJSON,
  EmailLoginMerchantInputFromJSON,
  EmailLoginMerchantInputToJSON,
  EmptyResultDtoFromJSON,
  EmptyResultDtoToJSON,
  ForbiddenExceptionFromJSON,
  ForbiddenExceptionToJSON,
  ForgotPasswordInputFromJSON,
  ForgotPasswordInputToJSON,
  UserInfoMerchantDtoFromJSON,
  UserInfoMerchantDtoToJSON,
} from '../models/index';
import * as runtime from '../runtime';

export interface AuthApiForgotPasswordRequest {
  forgotPasswordInput: ForgotPasswordInput;
}

export interface AuthApiLoginRequest {
  emailLoginMerchantInput: EmailLoginMerchantInput;
}

/**
 *
 */
export class AuthApi extends runtime.BaseAPI {
  /**
   */
  async forgotPasswordRaw(
    requestParameters: AuthApiForgotPasswordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<EmptyResultDto>> {
    if (
      requestParameters.forgotPasswordInput === null ||
      requestParameters.forgotPasswordInput === undefined
    ) {
      throw new runtime.RequiredError(
        'forgotPasswordInput',
        'Required parameter requestParameters.forgotPasswordInput was null or undefined when calling forgotPassword.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/merchant/v1/auth/forgot-password`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ForgotPasswordInputToJSON(requestParameters.forgotPasswordInput),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EmptyResultDtoFromJSON(jsonValue));
  }

  /**
   */
  async forgotPassword(
    requestParameters: AuthApiForgotPasswordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<EmptyResultDto> {
    const response = await this.forgotPasswordRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async getAblyTokenRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<AblyTokenDto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/merchant/v1/auth/ably-token`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => AblyTokenDtoFromJSON(jsonValue));
  }

  /**
   */
  async getAblyToken(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<AblyTokenDto> {
    const response = await this.getAblyTokenRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async loginRaw(
    requestParameters: AuthApiLoginRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<UserInfoMerchantDto>> {
    if (
      requestParameters.emailLoginMerchantInput === null ||
      requestParameters.emailLoginMerchantInput === undefined
    ) {
      throw new runtime.RequiredError(
        'emailLoginMerchantInput',
        'Required parameter requestParameters.emailLoginMerchantInput was null or undefined when calling login.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/merchant/v1/auth/login`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: EmailLoginMerchantInputToJSON(requestParameters.emailLoginMerchantInput),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserInfoMerchantDtoFromJSON(jsonValue),
    );
  }

  /**
   */
  async login(
    requestParameters: AuthApiLoginRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<UserInfoMerchantDto> {
    const response = await this.loginRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
