/* tslint:disable */
/* eslint-disable */
/**
 * NOSH-API
 * NOSH Backend API
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  CatalogItemMerchantDto,
  CatalogItemsAvailabilityMerchantInput,
  ForbiddenException,
  NotFoundException,
} from '../models/index';
import {
  CatalogItemMerchantDtoFromJSON,
  CatalogItemMerchantDtoToJSON,
  CatalogItemsAvailabilityMerchantInputFromJSON,
  CatalogItemsAvailabilityMerchantInputToJSON,
  ForbiddenExceptionFromJSON,
  ForbiddenExceptionToJSON,
  NotFoundExceptionFromJSON,
  NotFoundExceptionToJSON,
} from '../models/index';
import * as runtime from '../runtime';

export interface CatalogsApiSetItemsAvailabilityRequest {
  catalogItemsAvailabilityMerchantInput: CatalogItemsAvailabilityMerchantInput;
}

/**
 *
 */
export class CatalogsApi extends runtime.BaseAPI {
  /**
   */
  async getAllItemsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<CatalogItemMerchantDto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/merchant/v1/catalog-item/all`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(CatalogItemMerchantDtoFromJSON),
    );
  }

  /**
   */
  async getAllItems(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<CatalogItemMerchantDto>> {
    const response = await this.getAllItemsRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async setItemsAvailabilityRaw(
    requestParameters: CatalogsApiSetItemsAvailabilityRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.catalogItemsAvailabilityMerchantInput === null ||
      requestParameters.catalogItemsAvailabilityMerchantInput === undefined
    ) {
      throw new runtime.RequiredError(
        'catalogItemsAvailabilityMerchantInput',
        'Required parameter requestParameters.catalogItemsAvailabilityMerchantInput was null or undefined when calling setItemsAvailability.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/merchant/v1/catalog-item/set-availability`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: CatalogItemsAvailabilityMerchantInputToJSON(
          requestParameters.catalogItemsAvailabilityMerchantInput,
        ),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async setItemsAvailability(
    requestParameters: CatalogsApiSetItemsAvailabilityRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.setItemsAvailabilityRaw(requestParameters, initOverrides);
  }
}
