/* tslint:disable */
/* eslint-disable */
/**
 * NOSH-API
 * NOSH Backend API
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  DeviceExpoPushNotificationTokenCustomerInput,
  EmptyResultDto,
  ForbiddenException,
  MerchantAvailabilityMerchantInput,
  MerchantMerchantDto,
  MerchantPartialMerchantDto,
  MerchantUpdateMerchantInput,
  NotFoundException,
} from '../models/index';
import {
  DeviceExpoPushNotificationTokenCustomerInputFromJSON,
  DeviceExpoPushNotificationTokenCustomerInputToJSON,
  EmptyResultDtoFromJSON,
  EmptyResultDtoToJSON,
  ForbiddenExceptionFromJSON,
  ForbiddenExceptionToJSON,
  MerchantAvailabilityMerchantInputFromJSON,
  MerchantAvailabilityMerchantInputToJSON,
  MerchantMerchantDtoFromJSON,
  MerchantMerchantDtoToJSON,
  MerchantPartialMerchantDtoFromJSON,
  MerchantPartialMerchantDtoToJSON,
  MerchantUpdateMerchantInputFromJSON,
  MerchantUpdateMerchantInputToJSON,
  NotFoundExceptionFromJSON,
  NotFoundExceptionToJSON,
} from '../models/index';
import * as runtime from '../runtime';

export interface MerchantsApiSetMerchantAvailabilityRequest {
  merchantAvailabilityMerchantInput: MerchantAvailabilityMerchantInput;
}

export interface MerchantsApiUpdateMerchantRequest {
  merchantUpdateMerchantInput: MerchantUpdateMerchantInput;
}

export interface MerchantsApiUpdateNotificationTokenRequest {
  deviceExpoPushNotificationTokenCustomerInput: DeviceExpoPushNotificationTokenCustomerInput;
}

/**
 *
 */
export class MerchantsApi extends runtime.BaseAPI {
  /**
   */
  async getMerchantRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<MerchantPartialMerchantDto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/merchant/v1/merchant`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MerchantPartialMerchantDtoFromJSON(jsonValue),
    );
  }

  /**
   */
  async getMerchant(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<MerchantPartialMerchantDto> {
    const response = await this.getMerchantRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async setMerchantAvailabilityRaw(
    requestParameters: MerchantsApiSetMerchantAvailabilityRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.merchantAvailabilityMerchantInput === null ||
      requestParameters.merchantAvailabilityMerchantInput === undefined
    ) {
      throw new runtime.RequiredError(
        'merchantAvailabilityMerchantInput',
        'Required parameter requestParameters.merchantAvailabilityMerchantInput was null or undefined when calling setMerchantAvailability.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/merchant/v1/merchant/set-availability`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: MerchantAvailabilityMerchantInputToJSON(
          requestParameters.merchantAvailabilityMerchantInput,
        ),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async setMerchantAvailability(
    requestParameters: MerchantsApiSetMerchantAvailabilityRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.setMerchantAvailabilityRaw(requestParameters, initOverrides);
  }

  /**
   */
  async updateMerchantRaw(
    requestParameters: MerchantsApiUpdateMerchantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<MerchantMerchantDto>> {
    if (
      requestParameters.merchantUpdateMerchantInput === null ||
      requestParameters.merchantUpdateMerchantInput === undefined
    ) {
      throw new runtime.RequiredError(
        'merchantUpdateMerchantInput',
        'Required parameter requestParameters.merchantUpdateMerchantInput was null or undefined when calling updateMerchant.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/merchant/v1/merchant`,
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: MerchantUpdateMerchantInputToJSON(requestParameters.merchantUpdateMerchantInput),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      MerchantMerchantDtoFromJSON(jsonValue),
    );
  }

  /**
   */
  async updateMerchant(
    requestParameters: MerchantsApiUpdateMerchantRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<MerchantMerchantDto> {
    const response = await this.updateMerchantRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async updateNotificationTokenRaw(
    requestParameters: MerchantsApiUpdateNotificationTokenRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<EmptyResultDto>> {
    if (
      requestParameters.deviceExpoPushNotificationTokenCustomerInput === null ||
      requestParameters.deviceExpoPushNotificationTokenCustomerInput === undefined
    ) {
      throw new runtime.RequiredError(
        'deviceExpoPushNotificationTokenCustomerInput',
        'Required parameter requestParameters.deviceExpoPushNotificationTokenCustomerInput was null or undefined when calling updateNotificationToken.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/merchant/v1/merchant/notification-token`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: DeviceExpoPushNotificationTokenCustomerInputToJSON(
          requestParameters.deviceExpoPushNotificationTokenCustomerInput,
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => EmptyResultDtoFromJSON(jsonValue));
  }

  /**
   */
  async updateNotificationToken(
    requestParameters: MerchantsApiUpdateNotificationTokenRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<EmptyResultDto> {
    const response = await this.updateNotificationTokenRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
