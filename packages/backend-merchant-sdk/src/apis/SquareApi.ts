/* tslint:disable */
/* eslint-disable */
/**
 * NOSH-API
 * NOSH Backend API
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  BadRequestException,
  ForbiddenException,
  SetSquareLocationInput,
  SquareAuthCompleteDto,
  SquareAuthCompleteInput,
  SquareAuthStartDto,
  SquareAuthStartInput,
  SquareIntegrationStateDto,
  SquareLinkStateDto,
  SquareLocationsDto,
  SquareUnlinkInput,
} from '../models/index';
import {
  BadRequestExceptionFromJSON,
  BadRequestExceptionToJSON,
  ForbiddenExceptionFromJSON,
  ForbiddenExceptionToJSON,
  SetSquareLocationInputFromJSON,
  SetSquareLocationInputToJSON,
  SquareAuthCompleteDtoFromJSON,
  SquareAuthCompleteDtoToJSON,
  SquareAuthCompleteInputFromJSON,
  SquareAuthCompleteInputToJSON,
  SquareAuthStartDtoFromJSON,
  SquareAuthStartDtoToJSON,
  SquareAuthStartInputFromJSON,
  SquareAuthStartInputToJSON,
  SquareIntegrationStateDtoFromJSON,
  SquareIntegrationStateDtoToJSON,
  SquareLinkStateDtoFromJSON,
  SquareLinkStateDtoToJSON,
  SquareLocationsDtoFromJSON,
  SquareLocationsDtoToJSON,
  SquareUnlinkInputFromJSON,
  SquareUnlinkInputToJSON,
} from '../models/index';
import * as runtime from '../runtime';

export interface SquareApiCompleteLinkRequest {
  squareAuthCompleteInput: SquareAuthCompleteInput;
}

export interface SquareApiGetLinkStatusRequest {
  merchantId: string;
}

export interface SquareApiGetLocationsRequest {
  merchantId: string;
}

export interface SquareApiGetStateRequest {
  merchantId: string;
}

export interface SquareApiSetLocationRequest {
  merchantId: string;
  setSquareLocationInput: SetSquareLocationInput;
}

export interface SquareApiStartLinkRequest {
  squareAuthStartInput: SquareAuthStartInput;
}

export interface SquareApiSyncMenuRequest {
  merchantId: string;
}

export interface SquareApiUnlinkRequest {
  squareUnlinkInput: SquareUnlinkInput;
}

/**
 *
 */
export class SquareApi extends runtime.BaseAPI {
  /**
   */
  async completeLinkRaw(
    requestParameters: SquareApiCompleteLinkRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SquareAuthCompleteDto>> {
    if (
      requestParameters.squareAuthCompleteInput === null ||
      requestParameters.squareAuthCompleteInput === undefined
    ) {
      throw new runtime.RequiredError(
        'squareAuthCompleteInput',
        'Required parameter requestParameters.squareAuthCompleteInput was null or undefined when calling completeLink.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/square/v1/auth/complete`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: SquareAuthCompleteInputToJSON(requestParameters.squareAuthCompleteInput),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SquareAuthCompleteDtoFromJSON(jsonValue),
    );
  }

  /**
   */
  async completeLink(
    requestParameters: SquareApiCompleteLinkRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SquareAuthCompleteDto> {
    const response = await this.completeLinkRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async getLinkStatusRaw(
    requestParameters: SquareApiGetLinkStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SquareLinkStateDto>> {
    if (requestParameters.merchantId === null || requestParameters.merchantId === undefined) {
      throw new runtime.RequiredError(
        'merchantId',
        'Required parameter requestParameters.merchantId was null or undefined when calling getLinkStatus.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.merchantId !== undefined) {
      queryParameters['merchantId'] = requestParameters.merchantId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/square/v1/link-status`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SquareLinkStateDtoFromJSON(jsonValue),
    );
  }

  /**
   */
  async getLinkStatus(
    requestParameters: SquareApiGetLinkStatusRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SquareLinkStateDto> {
    const response = await this.getLinkStatusRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async getLocationsRaw(
    requestParameters: SquareApiGetLocationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SquareLocationsDto>> {
    if (requestParameters.merchantId === null || requestParameters.merchantId === undefined) {
      throw new runtime.RequiredError(
        'merchantId',
        'Required parameter requestParameters.merchantId was null or undefined when calling getLocations.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.merchantId !== undefined) {
      queryParameters['merchantId'] = requestParameters.merchantId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/square/v1/locations`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SquareLocationsDtoFromJSON(jsonValue),
    );
  }

  /**
   */
  async getLocations(
    requestParameters: SquareApiGetLocationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SquareLocationsDto> {
    const response = await this.getLocationsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async getStateRaw(
    requestParameters: SquareApiGetStateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SquareIntegrationStateDto>> {
    if (requestParameters.merchantId === null || requestParameters.merchantId === undefined) {
      throw new runtime.RequiredError(
        'merchantId',
        'Required parameter requestParameters.merchantId was null or undefined when calling getState.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.merchantId !== undefined) {
      queryParameters['merchantId'] = requestParameters.merchantId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/square/v1/state`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SquareIntegrationStateDtoFromJSON(jsonValue),
    );
  }

  /**
   */
  async getState(
    requestParameters: SquareApiGetStateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SquareIntegrationStateDto> {
    const response = await this.getStateRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async setLocationRaw(
    requestParameters: SquareApiSetLocationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.merchantId === null || requestParameters.merchantId === undefined) {
      throw new runtime.RequiredError(
        'merchantId',
        'Required parameter requestParameters.merchantId was null or undefined when calling setLocation.',
      );
    }

    if (
      requestParameters.setSquareLocationInput === null ||
      requestParameters.setSquareLocationInput === undefined
    ) {
      throw new runtime.RequiredError(
        'setSquareLocationInput',
        'Required parameter requestParameters.setSquareLocationInput was null or undefined when calling setLocation.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.merchantId !== undefined) {
      queryParameters['merchantId'] = requestParameters.merchantId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/square/v1/location`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: SetSquareLocationInputToJSON(requestParameters.setSquareLocationInput),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async setLocation(
    requestParameters: SquareApiSetLocationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.setLocationRaw(requestParameters, initOverrides);
  }

  /**
   */
  async startLinkRaw(
    requestParameters: SquareApiStartLinkRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SquareAuthStartDto>> {
    if (
      requestParameters.squareAuthStartInput === null ||
      requestParameters.squareAuthStartInput === undefined
    ) {
      throw new runtime.RequiredError(
        'squareAuthStartInput',
        'Required parameter requestParameters.squareAuthStartInput was null or undefined when calling startLink.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/square/v1/auth/start`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: SquareAuthStartInputToJSON(requestParameters.squareAuthStartInput),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SquareAuthStartDtoFromJSON(jsonValue),
    );
  }

  /**
   */
  async startLink(
    requestParameters: SquareApiStartLinkRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SquareAuthStartDto> {
    const response = await this.startLinkRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   */
  async syncMenuRaw(
    requestParameters: SquareApiSyncMenuRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.merchantId === null || requestParameters.merchantId === undefined) {
      throw new runtime.RequiredError(
        'merchantId',
        'Required parameter requestParameters.merchantId was null or undefined when calling syncMenu.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.merchantId !== undefined) {
      queryParameters['merchantId'] = requestParameters.merchantId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/square/v1/sync-menu`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async syncMenu(
    requestParameters: SquareApiSyncMenuRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.syncMenuRaw(requestParameters, initOverrides);
  }

  /**
   */
  async unlinkRaw(
    requestParameters: SquareApiUnlinkRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.squareUnlinkInput === null ||
      requestParameters.squareUnlinkInput === undefined
    ) {
      throw new runtime.RequiredError(
        'squareUnlinkInput',
        'Required parameter requestParameters.squareUnlinkInput was null or undefined when calling unlink.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/square/v1/unlink`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: SquareUnlinkInputToJSON(requestParameters.squareUnlinkInput),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async unlink(
    requestParameters: SquareApiUnlinkRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.unlinkRaw(requestParameters, initOverrides);
  }

  /**
   */
  async webhookRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/api/square/v1/webhook`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async webhook(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
    await this.webhookRaw(initOverrides);
  }
}
