/* tslint:disable */
/* eslint-disable */
/**
 * NOSH-API
 * NOSH Backend API
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CartItemModifierMerchantDto } from './CartItemModifierMerchantDto';
import {
  CartItemModifierMerchantDtoFromJSON,
  CartItemModifierMerchantDtoFromJSONTyped,
  CartItemModifierMerchantDtoToJSON,
} from './CartItemModifierMerchantDto';

/**
 *
 * @export
 * @interface CartModifierGroupMerchantDto
 */
export interface CartModifierGroupMerchantDto {
  /**
   *
   * @type {string}
   * @memberof CartModifierGroupMerchantDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CartModifierGroupMerchantDto
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof CartModifierGroupMerchantDto
   */
  maximumSelection: string;
  /**
   *
   * @type {string}
   * @memberof CartModifierGroupMerchantDto
   */
  minimumSelection: string;
  /**
   *
   * @type {Array<string>}
   * @memberof CartModifierGroupMerchantDto
   */
  images: Array<string>;
  /**
   *
   * @type {string}
   * @memberof CartModifierGroupMerchantDto
   */
  catalogModifierGroupId: string;
  /**
   *
   * @type {Array<CartItemModifierMerchantDto>}
   * @memberof CartModifierGroupMerchantDto
   */
  modifiers: Array<CartItemModifierMerchantDto>;
}

/**
 * Check if a given object implements the CartModifierGroupMerchantDto interface.
 */
export function instanceOfCartModifierGroupMerchantDto(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'name' in value;
  isInstance = isInstance && 'description' in value;
  isInstance = isInstance && 'maximumSelection' in value;
  isInstance = isInstance && 'minimumSelection' in value;
  isInstance = isInstance && 'images' in value;
  isInstance = isInstance && 'catalogModifierGroupId' in value;
  isInstance = isInstance && 'modifiers' in value;

  return isInstance;
}

export function CartModifierGroupMerchantDtoFromJSON(json: any): CartModifierGroupMerchantDto {
  return CartModifierGroupMerchantDtoFromJSONTyped(json, false);
}

export function CartModifierGroupMerchantDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): CartModifierGroupMerchantDto {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    description: json['description'],
    maximumSelection: json['maximumSelection'],
    minimumSelection: json['minimumSelection'],
    images: json['images'],
    catalogModifierGroupId: json['catalogModifierGroupId'],
    modifiers: (json['modifiers'] as Array<any>).map(CartItemModifierMerchantDtoFromJSON),
  };
}

export function CartModifierGroupMerchantDtoToJSON(
  value?: CartModifierGroupMerchantDto | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    description: value.description,
    maximumSelection: value.maximumSelection,
    minimumSelection: value.minimumSelection,
    images: value.images,
    catalogModifierGroupId: value.catalogModifierGroupId,
    modifiers: (value.modifiers as Array<any>).map(CartItemModifierMerchantDtoToJSON),
  };
}
