/* tslint:disable */
/* eslint-disable */
/**
 * NOSH-API
 * NOSH Backend API
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface OrderEventMerchantDto
 */
export interface OrderEventMerchantDto {
  /**
   *
   * @type {string}
   * @memberof OrderEventMerchantDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof OrderEventMerchantDto
   */
  status?: OrderEventMerchantDtoStatusEnum;
  /**
   *
   * @type {string}
   * @memberof OrderEventMerchantDto
   */
  eventSource: OrderEventMerchantDtoEventSourceEnum;
  /**
   *
   * @type {string}
   * @memberof OrderEventMerchantDto
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof OrderEventMerchantDto
   */
  orderId: string;
}

/**
 * @export
 */
export const OrderEventMerchantDtoStatusEnum = {
  Scheduled: 'SCHEDULED',
  NewOrder: 'NEW_ORDER',
  Confirmed: 'CONFIRMED',
  PickedUp: 'PICKED_UP',
  Canceled: 'CANCELED',
  Fulfilled: 'FULFILLED',
  Failed: 'FAILED',
  Prepared: 'PREPARED',
  Rejected: 'REJECTED',
  FailedToCreate: 'FAILED_TO_CREATE',
  Unknown: 'UNKNOWN',
  Closed: 'CLOSED',
} as const;
export type OrderEventMerchantDtoStatusEnum =
  (typeof OrderEventMerchantDtoStatusEnum)[keyof typeof OrderEventMerchantDtoStatusEnum];

/**
 * @export
 */
export const OrderEventMerchantDtoEventSourceEnum = {
  Chowly: 'CHOWLY',
  Checkmate: 'CHECKMATE',
  Nosh: 'NOSH',
  Shipday: 'SHIPDAY',
  Courier: 'COURIER',
  Square: 'SQUARE',
} as const;
export type OrderEventMerchantDtoEventSourceEnum =
  (typeof OrderEventMerchantDtoEventSourceEnum)[keyof typeof OrderEventMerchantDtoEventSourceEnum];

/**
 * Check if a given object implements the OrderEventMerchantDto interface.
 */
export function instanceOfOrderEventMerchantDto(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'eventSource' in value;
  isInstance = isInstance && 'createdAt' in value;
  isInstance = isInstance && 'orderId' in value;

  return isInstance;
}

export function OrderEventMerchantDtoFromJSON(json: any): OrderEventMerchantDto {
  return OrderEventMerchantDtoFromJSONTyped(json, false);
}

export function OrderEventMerchantDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): OrderEventMerchantDto {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    status: !exists(json, 'status') ? undefined : json['status'],
    eventSource: json['eventSource'],
    createdAt: json['createdAt'],
    orderId: json['orderId'],
  };
}

export function OrderEventMerchantDtoToJSON(value?: OrderEventMerchantDto | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    status: value.status,
    eventSource: value.eventSource,
    createdAt: value.createdAt,
    orderId: value.orderId,
  };
}
