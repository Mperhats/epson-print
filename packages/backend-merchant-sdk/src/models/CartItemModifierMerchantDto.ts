/* tslint:disable */
/* eslint-disable */
/**
 * NOSH-API
 * NOSH Backend API
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CartModifierGroupMerchantDto } from './CartModifierGroupMerchantDto';
import {
  CartModifierGroupMerchantDtoFromJSON,
  CartModifierGroupMerchantDtoFromJSONTyped,
  CartModifierGroupMerchantDtoToJSON,
} from './CartModifierGroupMerchantDto';

/**
 *
 * @export
 * @interface CartItemModifierMerchantDto
 */
export interface CartItemModifierMerchantDto {
  /**
   *
   * @type {string}
   * @memberof CartItemModifierMerchantDto
   */
  id: string;
  /**
   *
   * @type {number}
   * @memberof CartItemModifierMerchantDto
   */
  quantity: number;
  /**
   *
   * @type {string}
   * @memberof CartItemModifierMerchantDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CartItemModifierMerchantDto
   */
  catalogModifierId: string;
  /**
   *
   * @type {number}
   * @memberof CartItemModifierMerchantDto
   */
  price: number;
  /**
   *
   * @type {number}
   * @memberof CartItemModifierMerchantDto
   */
  pointsPrice: number;
  /**
   *
   * @type {number}
   * @memberof CartItemModifierMerchantDto
   */
  ordinal: number;
  /**
   *
   * @type {Array<CartModifierGroupMerchantDto>}
   * @memberof CartItemModifierMerchantDto
   */
  childModifierGroups?: Array<CartModifierGroupMerchantDto>;
}

/**
 * Check if a given object implements the CartItemModifierMerchantDto interface.
 */
export function instanceOfCartItemModifierMerchantDto(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'quantity' in value;
  isInstance = isInstance && 'name' in value;
  isInstance = isInstance && 'catalogModifierId' in value;
  isInstance = isInstance && 'price' in value;
  isInstance = isInstance && 'pointsPrice' in value;
  isInstance = isInstance && 'ordinal' in value;

  return isInstance;
}

export function CartItemModifierMerchantDtoFromJSON(json: any): CartItemModifierMerchantDto {
  return CartItemModifierMerchantDtoFromJSONTyped(json, false);
}

export function CartItemModifierMerchantDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): CartItemModifierMerchantDto {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    quantity: json['quantity'],
    name: json['name'],
    catalogModifierId: json['catalogModifierId'],
    price: json['price'],
    pointsPrice: json['pointsPrice'],
    ordinal: json['ordinal'],
    childModifierGroups: !exists(json, 'childModifierGroups')
      ? undefined
      : (json['childModifierGroups'] as Array<any>).map(CartModifierGroupMerchantDtoFromJSON),
  };
}

export function CartItemModifierMerchantDtoToJSON(value?: CartItemModifierMerchantDto | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    quantity: value.quantity,
    name: value.name,
    catalogModifierId: value.catalogModifierId,
    price: value.price,
    pointsPrice: value.pointsPrice,
    ordinal: value.ordinal,
    childModifierGroups:
      value.childModifierGroups === undefined
        ? undefined
        : (value.childModifierGroups as Array<any>).map(CartModifierGroupMerchantDtoToJSON),
  };
}
