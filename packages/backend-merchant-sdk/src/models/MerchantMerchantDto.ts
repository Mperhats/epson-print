/* tslint:disable */
/* eslint-disable */
/**
 * NOSH-API
 * NOSH Backend API
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CuisineTypeDto } from './CuisineTypeDto';
import {
  CuisineTypeDtoFromJSON,
  CuisineTypeDtoFromJSONTyped,
  CuisineTypeDtoToJSON,
} from './CuisineTypeDto';

/**
 *
 * @export
 * @interface MerchantMerchantDto
 */
export interface MerchantMerchantDto {
  /**
   *
   * @type {string}
   * @memberof MerchantMerchantDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof MerchantMerchantDto
   */
  email: string | null;
  /**
   *
   * @type {string}
   * @memberof MerchantMerchantDto
   */
  coverImage?: string | null;
  /**
   *
   * @type {string}
   * @memberof MerchantMerchantDto
   */
  logo?: string | null;
  /**
   *
   * @type {string}
   * @memberof MerchantMerchantDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof MerchantMerchantDto
   */
  phone: string;
  /**
   *
   * @type {string}
   * @memberof MerchantMerchantDto
   */
  slug: string;
  /**
   *
   * @type {string}
   * @memberof MerchantMerchantDto
   */
  timezone: string;
  /**
   *
   * @type {string}
   * @memberof MerchantMerchantDto
   */
  inactiveUntil: string | null;
  /**
   *
   * @type {string}
   * @memberof MerchantMerchantDto
   */
  addressLine1: string;
  /**
   *
   * @type {string}
   * @memberof MerchantMerchantDto
   */
  addressLine2?: string | null;
  /**
   *
   * @type {string}
   * @memberof MerchantMerchantDto
   */
  locality: string;
  /**
   *
   * @type {string}
   * @memberof MerchantMerchantDto
   */
  administrativeDistrictLevel1: string;
  /**
   *
   * @type {string}
   * @memberof MerchantMerchantDto
   */
  postalCode: string;
  /**
   *
   * @type {string}
   * @memberof MerchantMerchantDto
   */
  country: string;
  /**
   *
   * @type {number}
   * @memberof MerchantMerchantDto
   */
  latitude: number;
  /**
   *
   * @type {number}
   * @memberof MerchantMerchantDto
   */
  longitude: number;
  /**
   *
   * @type {number}
   * @memberof MerchantMerchantDto
   */
  deliveryRadiusMiles: number;
  /**
   *
   * @type {number}
   * @memberof MerchantMerchantDto
   */
  deliveryCommissionRate: number;
  /**
   *
   * @type {number}
   * @memberof MerchantMerchantDto
   */
  pickupCommissionRate: number;
  /**
   *
   * @type {number}
   * @memberof MerchantMerchantDto
   */
  taxRate: number;
  /**
   *
   * @type {string}
   * @memberof MerchantMerchantDto
   */
  merchantOrganizationId: string;
  /**
   *
   * @type {string}
   * @memberof MerchantMerchantDto
   */
  menuProvider: MerchantMerchantDtoMenuProviderEnum;
  /**
   *
   * @type {Array<CuisineTypeDto>}
   * @memberof MerchantMerchantDto
   */
  cuisineTypes: Array<CuisineTypeDto>;
  /**
   *
   * @type {boolean}
   * @memberof MerchantMerchantDto
   */
  doesAllowScheduledOrders: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MerchantMerchantDto
   */
  sendNewOrderEmail: boolean;
}

/**
 * @export
 */
export const MerchantMerchantDtoMenuProviderEnum = {
  Chowly: 'CHOWLY',
  Checkmate: 'CHECKMATE',
  Nosh: 'NOSH',
  Square: 'SQUARE',
} as const;
export type MerchantMerchantDtoMenuProviderEnum =
  (typeof MerchantMerchantDtoMenuProviderEnum)[keyof typeof MerchantMerchantDtoMenuProviderEnum];

/**
 * Check if a given object implements the MerchantMerchantDto interface.
 */
export function instanceOfMerchantMerchantDto(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'email' in value;
  isInstance = isInstance && 'name' in value;
  isInstance = isInstance && 'phone' in value;
  isInstance = isInstance && 'slug' in value;
  isInstance = isInstance && 'timezone' in value;
  isInstance = isInstance && 'inactiveUntil' in value;
  isInstance = isInstance && 'addressLine1' in value;
  isInstance = isInstance && 'locality' in value;
  isInstance = isInstance && 'administrativeDistrictLevel1' in value;
  isInstance = isInstance && 'postalCode' in value;
  isInstance = isInstance && 'country' in value;
  isInstance = isInstance && 'latitude' in value;
  isInstance = isInstance && 'longitude' in value;
  isInstance = isInstance && 'deliveryRadiusMiles' in value;
  isInstance = isInstance && 'deliveryCommissionRate' in value;
  isInstance = isInstance && 'pickupCommissionRate' in value;
  isInstance = isInstance && 'taxRate' in value;
  isInstance = isInstance && 'merchantOrganizationId' in value;
  isInstance = isInstance && 'menuProvider' in value;
  isInstance = isInstance && 'cuisineTypes' in value;
  isInstance = isInstance && 'doesAllowScheduledOrders' in value;
  isInstance = isInstance && 'sendNewOrderEmail' in value;

  return isInstance;
}

export function MerchantMerchantDtoFromJSON(json: any): MerchantMerchantDto {
  return MerchantMerchantDtoFromJSONTyped(json, false);
}

export function MerchantMerchantDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): MerchantMerchantDto {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    email: json['email'],
    coverImage: !exists(json, 'coverImage') ? undefined : json['coverImage'],
    logo: !exists(json, 'logo') ? undefined : json['logo'],
    name: json['name'],
    phone: json['phone'],
    slug: json['slug'],
    timezone: json['timezone'],
    inactiveUntil: json['inactiveUntil'],
    addressLine1: json['addressLine1'],
    addressLine2: !exists(json, 'addressLine2') ? undefined : json['addressLine2'],
    locality: json['locality'],
    administrativeDistrictLevel1: json['administrativeDistrictLevel1'],
    postalCode: json['postalCode'],
    country: json['country'],
    latitude: json['latitude'],
    longitude: json['longitude'],
    deliveryRadiusMiles: json['deliveryRadiusMiles'],
    deliveryCommissionRate: json['deliveryCommissionRate'],
    pickupCommissionRate: json['pickupCommissionRate'],
    taxRate: json['taxRate'],
    merchantOrganizationId: json['merchantOrganizationId'],
    menuProvider: json['menuProvider'],
    cuisineTypes: (json['cuisineTypes'] as Array<any>).map(CuisineTypeDtoFromJSON),
    doesAllowScheduledOrders: json['doesAllowScheduledOrders'],
    sendNewOrderEmail: json['sendNewOrderEmail'],
  };
}

export function MerchantMerchantDtoToJSON(value?: MerchantMerchantDto | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    email: value.email,
    coverImage: value.coverImage,
    logo: value.logo,
    name: value.name,
    phone: value.phone,
    slug: value.slug,
    timezone: value.timezone,
    inactiveUntil: value.inactiveUntil,
    addressLine1: value.addressLine1,
    addressLine2: value.addressLine2,
    locality: value.locality,
    administrativeDistrictLevel1: value.administrativeDistrictLevel1,
    postalCode: value.postalCode,
    country: value.country,
    latitude: value.latitude,
    longitude: value.longitude,
    deliveryRadiusMiles: value.deliveryRadiusMiles,
    deliveryCommissionRate: value.deliveryCommissionRate,
    pickupCommissionRate: value.pickupCommissionRate,
    taxRate: value.taxRate,
    merchantOrganizationId: value.merchantOrganizationId,
    menuProvider: value.menuProvider,
    cuisineTypes: (value.cuisineTypes as Array<any>).map(CuisineTypeDtoToJSON),
    doesAllowScheduledOrders: value.doesAllowScheduledOrders,
    sendNewOrderEmail: value.sendNewOrderEmail,
  };
}
