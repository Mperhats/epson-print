/* tslint:disable */
/* eslint-disable */
/**
 * NOSH-API
 * NOSH Backend API
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface CuisineTypeDto
 */
export interface CuisineTypeDto {
  /**
   *
   * @type {string}
   * @memberof CuisineTypeDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof CuisineTypeDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CuisineTypeDto
   */
  icon: CuisineTypeDtoIconEnum;
}

/**
 * @export
 */
export const CuisineTypeDtoIconEnum = {
  African: 'AFRICAN',
  All: 'ALL',
  American: 'AMERICAN',
  Asian: 'ASIAN',
  Bakery: 'BAKERY',
  BarAndGrill: 'BAR_AND_GRILL',
  Bbq: 'BBQ',
  Breakfast: 'BREAKFAST',
  Brunch: 'BRUNCH',
  Burgers: 'BURGERS',
  Cafe: 'CAFE',
  Caribbean: 'CARIBBEAN',
  Chicken: 'CHICKEN',
  ChickenAndWaffles: 'CHICKEN_AND_WAFFLES',
  Chinese: 'CHINESE',
  ComfortFood: 'COMFORT_FOOD',
  Creole: 'CREOLE',
  Dessert: 'DESSERT',
  Diner: 'DINER',
  Drinks: 'DRINKS',
  Ethiopian: 'ETHIOPIAN',
  Exclusive: 'EXCLUSIVE',
  Fastfood: 'FASTFOOD',
  French: 'FRENCH',
  Fusion: 'FUSION',
  GlutenFree: 'GLUTEN_FREE',
  Gourmet: 'GOURMET',
  Grocery: 'GROCERY',
  Halal: 'HALAL',
  Healthy: 'HEALTHY',
  HotDogs: 'HOT_DOGS',
  IceCream: 'ICE_CREAM',
  Indian: 'INDIAN',
  Italian: 'ITALIAN',
  Jamaican: 'JAMAICAN',
  JuiceAndSmoothies: 'JUICE_AND_SMOOTHIES',
  Meat: 'MEAT',
  Mediterranean: 'MEDITERRANEAN',
  Mexican: 'MEXICAN',
  Pizza: 'PIZZA',
  Promos: 'PROMOS',
  PuertoRican: 'PUERTO_RICAN',
  Salad: 'SALAD',
  Sandwiches: 'SANDWICHES',
  Seafood: 'SEAFOOD',
  SoulFood: 'SOUL_FOOD',
  Soup: 'SOUP',
  SouthAmerican: 'SOUTH_AMERICAN',
  Southern: 'SOUTHERN',
  Sushi: 'SUSHI',
  Thai: 'THAI',
  Trinidadian: 'TRINIDADIAN',
  Vegan: 'VEGAN',
  Vegetarian: 'VEGETARIAN',
  Wings: 'WINGS',
} as const;
export type CuisineTypeDtoIconEnum =
  (typeof CuisineTypeDtoIconEnum)[keyof typeof CuisineTypeDtoIconEnum];

/**
 * Check if a given object implements the CuisineTypeDto interface.
 */
export function instanceOfCuisineTypeDto(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'name' in value;
  isInstance = isInstance && 'icon' in value;

  return isInstance;
}

export function CuisineTypeDtoFromJSON(json: any): CuisineTypeDto {
  return CuisineTypeDtoFromJSONTyped(json, false);
}

export function CuisineTypeDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): CuisineTypeDto {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    name: json['name'],
    icon: json['icon'],
  };
}

export function CuisineTypeDtoToJSON(value?: CuisineTypeDto | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    icon: value.icon,
  };
}
